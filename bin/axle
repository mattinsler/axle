#!/usr/bin/env node

function start_node(args) {
  var script = args[0];
  if (script.indexOf('/') !== 0) { script = process.cwd() + '/' + script; }
  
  process.argv = process.argv.slice(2);
  require(script);
}

function start_coffee(args) {
  var script = args[0];
  if (script.indexOf('/') !== 0) { script = process.cwd() + '/' + script; }
  
  process.env.NODE_PATH = (process.env.NODE_PATH || '') + ':/usr/local/lib/node_modules';
  require('module').Module._cache = {};
  require('module').Module._initPaths();
  
  require('coffee-script');
  process.argv = process.argv.slice(2);
  require(script);
}

function start_script(original_script, args) {
  var script = original_script;
  if (script.indexOf('/') !== 0) { script = process.cwd() + '/' + script; }
  try { script = fs.readlinkSync(script); } catch(e) {}
  
  var content = fs.readFileSync(script, 'utf8');
  content = content.slice(content.indexOf('\n') + 1);
  var filename = require('path').dirname(script) + '/' + require('crypto').randomBytes(8).toString('hex') + '.js';
  fs.writeFileSync(filename, content, 'utf8');
  
  process.on('uncaughtException', function() {
    try { fs.unlinkSync(filename); } catch(e) {}
  });
  process.on('exit', function() {
    try { fs.unlinkSync(filename); } catch(e) {}
  });
  
  process.env.NODE_PATH = (process.env.NODE_PATH || '') + ':/usr/local/lib/node_modules';
  require('module').Module._cache = {};
  require('module').Module._initPaths();
  
  process.argv = ['node', original_script].concat(process.argv.slice(3));
  require(filename);
}

require('coffee-script');
var Axle = require('../index');

if (process.argv.length === 2) {
  // Server
  return Axle.start_server();
}

// Client

var cmd = process.argv[2]
  , args = process.argv.slice(3);

Axle.start_client();

if (cmd === 'node') { return start_node(args); }
if (cmd === 'coffee') { return start_coffee(args); }

var exec = require('child_process').exec
  , fs = require('fs');

exec('which ' + cmd, function(err, stdout, stderr) {
  if (err) { return console.error(err.stack); }
  return start_script(stdout.replace(/(^[\r\n\t ]+|[\r\n\t ]+$)/g, ''), args);
});
